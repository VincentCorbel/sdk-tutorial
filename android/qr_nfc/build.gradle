import org.gradle.api.internal.artifacts.publish.DefaultPublishArtifact

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/groups/public"}
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath "net.researchgate:gradle-release:${project.versionGradleRelease}"
        classpath "com.github.dcendents:android-maven-gradle-plugin:${project.versionMavenAndroid}"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'net.researchgate.release'
apply plugin: 'com.github.dcendents.android-maven'

group = 'android.connecthings.app'
description = """QrNfcSdkDemo"""
version = "${project.versionName}"

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven {
        url "https://forge.adtag.eu/nexus/content/groups/public" }
    maven {
        url "https://forge.adtag.eu/nexus/content/repositories/releases"
    }
    maven {
        url "https://forge.adtag.eu/nexus/content/repositories/snapshots"
    }
    maven { url "http://repo.maven.apache.org/maven2" }
}

configurations {
    compile
}

dependencies {
    /* If you just want to access to FragmentAdtagContentAsker
    that permits to get content associate to a tag without build-in integration with QR or NFC
    */
    // compile "android.connecthings.adtag:android-adtag-sdk:${project.versionCt}"

    //Comment or remove these dependencies if you just want to use FragmentAdtagContentAsker without build-in integration with QR or NFC
    compile "com.connecthings.adtag:android-qr:${project.versionCt}"
    compile "com.connecthings.adtag:android-nfc-sdk:${project.versionCt}"
}

android {
    compileSdkVersion "${project.versionCompileAndroid}" as int
    buildToolsVersion "${project.versionAndroidBuildTools}"
    lintOptions {
        abortOnError false
    }
    defaultConfig {
        minSdkVersion "${project.versionMinAndroid}" as int
        targetSdkVersion "${project.versionTargetAndroid}" as int
        versionCode "${project.versionCode}" as int
        versionName "${project.versionName}"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
            zipAlignEnabled false
        }

    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            res.srcDirs=['res']
        }
    }
}
